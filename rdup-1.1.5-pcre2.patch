commit f7a1488d8b0082c54aa852a9434ccfec93dd19b9
Author: Crispin Boylan <crispin.boylan@beintrepid.co.uk>
Date:   Mon Feb 26 08:28:53 2024 +0000

    to pcre2

diff --git a/README b/README
index 5d1a041..5cc59e5 100644
--- a/README
+++ b/README
@@ -23,7 +23,7 @@ rdup depends on:
 * Gmake for compilation
 * Glib to build. Glib is the low level C library of the
   GTK project. Configure will check for this.
-* PCRE library 
+* PCRE2 library
 * LibNettle  - if you want rdup-tr to do path encryption and
   for sha hashing
 
diff --git a/configure.ac b/configure.ac
index fa47737..80c2c0b 100644
--- a/configure.ac
+++ b/configure.ac
@@ -62,28 +62,28 @@ AC_ARG_WITH(libpcre_libraries,
 if test "$with_libpcre_includes" != "no"; then
    CFLAGS="${CFLAGS} -I${with_libpcre_includes}"
 else
-   CFLAGS="${CFLAGS} `pcre-config --cflags`"
+   CFLAGS="${CFLAGS} `pcre2-config --cflags`"
 fi
 
 if test "$with_libpcre_libraries" != "no"; then
    LIBS="${LIBS} -L${with_libpcre_libraries}"
 else
-   LIBS="${LIBS} `pcre-config --libs`"
+   LIBS="${LIBS} `pcre2-config --libs8`"
 fi
 
 # PCRE configuration (required)
 # Verify that we have the headers
 PCRE_H=""
-AC_CHECK_HEADERS(pcre.h,, PCRE_H="no")
+AC_CHECK_HEADERS(pcre2.h,, PCRE_H="no", [#define PCRE2_CODE_UNIT_WIDTH 8])
 if test "$PCRE_H" = "no"; then
-	AC_MSG_ERROR([** No pcre library found.])
+	AC_MSG_ERROR([** No pcre2 header for library found.])
 fi
 
 # Verify that we have the library
 PCRE_L=""
-AC_CHECK_LIB(pcre, pcre_compile, ,PCRE_L="no")
+AC_CHECK_LIB(pcre2-8, pcre2_compile_8, , PCRE_L="no")
 if test "$PCRE_L" = "no"; then
-	AC_MSG_ERROR([** No pcre library found.])
+	AC_MSG_ERROR([** No pcre2 library found.])
 fi
 
 AC_ARG_WITH(libnettle_includes,
diff --git a/gfunc.c b/gfunc.c
index a775546..40d0888 100644
--- a/gfunc.c
+++ b/gfunc.c
@@ -7,7 +7,8 @@
 
 #include "rdup.h"
 #include "protocol.h"
-#include <pcre.h>
+#define PCRE2_CODE_UNIT_WIDTH 8
+#include <pcre2.h>
 #ifdef HAVE_LIBNETTLE
 #include <nettle/sha.h>
 #else
@@ -622,20 +623,30 @@ gboolean gfunc_subtract(gpointer data, gpointer value, gpointer diff)
 gboolean gfunc_regexp(GSList * l, char *n, size_t len)
 {
 	GSList *k;
-	pcre *P;
-	int ovector[REG_VECTOR];
+	pcre2_code *P;
 
 	for (k = g_slist_nth(l, 0); k; k = k->next) {
 		if (sig != 0)
 			signal_abort(sig);
 
-		P = (pcre *) k->data;
+		P = (pcre2_code *) k->data;
+
+		pcre2_match_data* match_data = pcre2_match_data_create_from_pattern(P,NULL);
+
 		/* pcre_exec errors are all < 0, so >= 0 is some kind
 		 * of success
 		 */
-		if (pcre_exec(P, NULL, n, len, 0, 0, ovector, REG_VECTOR) >= 0)
+
+		if (pcre2_match(P, (PCRE2_SPTR8)n, len, 0, 0, match_data, NULL) >= 0) {
+
+                        if(match_data) pcre2_match_data_free(match_data);
+
 			return TRUE;
+		}
+
+		if(match_data) pcre2_match_data_free(match_data);
 	}
+
 	return FALSE;
 }
 
diff --git a/regexp.c b/regexp.c
index be3729b..37b7f26 100644
--- a/regexp.c
+++ b/regexp.c
@@ -6,7 +6,8 @@
  */
 
 #include "rdup.h"
-#include <pcre.h>
+#define PCRE2_CODE_UNIT_WIDTH 8
+#include <pcre2.h>
 
 GSList *pregex_list = NULL;
 
@@ -18,15 +19,15 @@ gboolean regexp_init(char *file)
 {
 	FILE *fp;
 	char *buf;
-	const char *errbuf;
-	int erroff;
+	int errcode;
+	PCRE2_SIZE erroff;
 	char delim;
 	gpointer d;
 	size_t l;
 	size_t s;
 	size_t re_length;
 	ssize_t j;
-	pcre *P;
+	pcre2_code *P;
 
 	if ((fp = fopen(file, "r")) == NULL) {
 		msg(_("Could not open '%s\': %s"), file, strerror(errno));
@@ -45,16 +46,16 @@ gboolean regexp_init(char *file)
 		/* buf[j - 1] holds the delimeter */
 		buf[j - 1] = '\0';
 
-		if ((P = pcre_compile(buf, 0, &errbuf, &erroff, NULL)) == NULL) {
+		if ((P = pcre2_compile((PCRE2_SPTR)buf, PCRE2_ZERO_TERMINATED, 0, &errcode, &erroff, NULL)) == NULL) {
 			/* error */
 			fclose(fp);
 			msg(_
-			    ("Corrupt regular expression line: %zd, column %d: %s"),
-			    l, erroff, errbuf);
+			    ("Corrupt regular expression line: %zd, column %d: %d"),
+			    l, erroff, errcode);
 			g_free(buf);
 			return FALSE;
 		} else {
-			pcre_fullinfo(P, NULL, PCRE_INFO_SIZE, &re_length);
+			pcre2_pattern_info(P, PCRE2_INFO_SIZE, &re_length);
 			d = g_malloc(re_length);
 			d = memcpy(d, P, re_length);
 			pregex_list = g_slist_append(pregex_list, d);
